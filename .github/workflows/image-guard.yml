name: Image Size Check and Guard

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.png"
      - "**/*.webp"
      - "**/*.gif"
      - "**/*.svg"
      - "**/*.JPG"
      - "**/*.JPEG"
      - "**/*.PNG"
      - "**/*.WEBP"
      - "**/*.GIF"
      - "**/*.SVG"
  push:
    branches: [ main, develop ]
    paths:
      - "**/*.jpg"
      - "**/*.jpeg"
      - "**/*.png"
      - "**/*.webp"
      - "**/*.gif"
      - "**/*.svg"
      - "**/*.JPG"
      - "**/*.JPEG"
      - "**/*.PNG"
      - "**/*.WEBP"
      - "**/*.GIF"
      - "**/*.SVG"

jobs:
  check-images:
    runs-on: ubuntu-latest
    steps:
      - name: チェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 差分ファイル取得
        id: diff
        run: |
          # pushイベントでは github.event.before と github.sha が取れる
          git diff --name-only --diff-filter=ACMR \
            "${{ github.event.before }}" "${{ github.sha }}" > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Python セットアップ
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Pillow インストール
        run: pip install pillow

      - name: 画像チェック
        run: |
          python << 'PY'
          import os, pathlib
          from PIL import Image

          LIMIT_MB = 25
          LIMIT_BYTES = LIMIT_MB * 1024 * 1024

          changed = [p.strip() for p in open("changed_files.txt") if p.strip()]
          exts = {".jpg", ".jpeg", ".png", ".webp", ".gif", ".svg"}
          targets = [p for p in changed if pathlib.Path(p).suffix.lower() in exts and os.path.isfile(p)]

          def human(n):
              for unit in ["B","KB","MB","GB"]:
                  if n < 1024.0:
                      return f"{n:.1f}{unit}"
                  n /= 1024.0
              return f"{n:.1f}TB"

          failures = []
          for f in targets:
              size = os.path.getsize(f)
              if size > LIMIT_BYTES:
                  failures.append(f"❌ {f} → {human(size)}")

          if failures:
              print("## 画像サイズチェック: 失敗")
              for x in failures:
                  print(x)
              exit(1)
          else:
              print("✅ 画像サイズチェック: 問題なし")
          PY
